---
import type {
  BreadcrumbList,
  Organization,
  WebSite,
  WithContext,
} from 'schema-dts'
import GoogleAnalytics from '@/components/layout/GoogleAnalytics.astro'
import StructuredData from '@/components/layout/StructuredData.astro'

export interface Props {
  title?: string
  description: string
}

const { title, description } = Astro.props

if (Astro.site === undefined) {
  throw new Error(
    'ウェブサイトのURLが設定されていません。astro.config.tsで指定してください。',
  )
}

const siteUrl = Astro.site.toString()
const canonicalUrl = new URL(Astro.url.pathname, Astro.site).toString()
const faviconUrl = new URL('/favicon.webp', Astro.site).toString()

const siteName = 'OUCC - 大阪大学コンピュータクラブ'
const siteNameShort = 'OUCC'
const composedTitle = title === undefined ? siteName : `${title} | ${siteName}`
---

<!doctype html>
<html lang="ja" prefix="og: https://ogp.me/ns/website#">
  <head>
    <GoogleAnalytics />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalUrl} />
    <link rel="icon" href="/favicon.webp" />
    <title>{composedTitle}</title>
    <slot name="header" />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:locale" content="ja_JP" />
    <meta property="og:type" content="website" />
    <meta name="twitter:site" content="@OUCC" />
    <meta name="twitter:creator" content="@OUCC" />
  </head>
  <body class="flex min-h-screen flex-col">
    <slot />
    <StructuredData
      data={{
        '@context': 'https://schema.org',
        '@type': 'WebSite',
        name: siteName,
        alternateName: siteNameShort,
        url: siteUrl,
      } satisfies WithContext<WebSite>}
    />
    <StructuredData
      data={{
        '@context': 'https://schema.org',
        '@type': 'Organization',
        logo: faviconUrl,
        url: siteUrl,
      } satisfies WithContext<Organization>}
    />
    {
      title !== undefined && (
        <StructuredData
          data={
            {
              '@context': 'https://schema.org',
              '@type': 'BreadcrumbList',
              itemListElement: [
                {
                  '@type': 'ListItem',
                  position: 1,
                  name: title,
                  item: canonicalUrl,
                },
              ],
            } satisfies WithContext<BreadcrumbList>
          }
        />
      )
    }
    <style is:global>
      html {
        /* 参考: https://ics.media/entry/200317/ */
        font-family: 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic ProN',
          'Hiragino Sans', Meiryo, sans-serif;
      }
    </style>
  </body>
</html>
