---
import defaultOgImage from '@/assets/hashtag.svg'
import BlogListSection from '@/components/blog/BlogListSection.astro'
import BlogTitle from '@/components/blog/BlogTitle.astro'
import TagIcon from '@/components/blog/icon/TagIcon.astro'
import TagAboutSection from '@/components/blog/tag/TagAboutSection.astro'
import BlogLayout from '@/layouts/BlogLayout.astro'
import { getImageWithSvgConvert } from '@/utils/getImageWithSvgConvert'
import { getCollection } from 'astro:content'
export async function getStaticPaths() {
  const tagEntries = await getCollection('tags')
  return tagEntries.map((tag) => ({
    params: { slug: tag.id },
    props: { tag },
  }))
}

const {
  tag: { id, data: tag },
} = Astro.props
const blogEntries = await getCollection('blogs')

const ogpPath = (
  await getImageWithSvgConvert({
    src: tag.image ?? defaultOgImage,
    format: 'jpeg',
  })
).src

const isShowAbout = tag.description || tag.site || tag.document || tag.github
---

<BlogLayout
  title={`${tag.name}の記事一覧`}
  description={tag.description ?? `${tag.name}に関する記事が集まっています`}
  image={ogpPath}
  summarySize="summary"
>
  <BlogTitle title={tag.name} background="white">
    <Fragment slot="icon"><TagIcon tag={tag} size={80} /></Fragment>
  </BlogTitle>
  <main class="flex flex-col h-full">
    {isShowAbout && <TagAboutSection tag={tag} />}
    <BlogListSection
      title={`${tag.name} に関する記事`}
      blogs={blogEntries.filter((b) => b.data.tags.some((t) => t.id === id))}
    />
  </main>
</BlogLayout>
